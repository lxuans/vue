<!DOCTYPE html>
<html lang="zh-cn"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script async="" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/analytics.js"></script>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Vue.js——60分钟快速入门 - 無雄 - 博客园</title>
<link type="text/css" rel="stylesheet" href="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/bundle-LessIsMore.css">
<link id="mobile-style" media="only screen and (max-width: 768px)" type="text/css" rel="stylesheet" href="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/bundle-LessIsMore-mobile.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/rik28/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/rik28/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/rik28/wlwmanifest.xml">
<script src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/jquery.js" type="text/javascript"></script>
<script type="text/javascript">var currentBlogApp = 'rik28', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/blog-common.js" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<div id="home">
<div id="header">
	<div id="blogTitle">
		
<!--done-->
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/rik28/">無雄</a></div>
<div class="subtitle"></div>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li id="nav_myhome"><a id="blog_nav_myhome" class="menu" href="http://www.cnblogs.com/rik28/">首页</a></li>
<li id="nav_newpost"><a id="blog_nav_newpost" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li id="nav_contact"><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/%E7%84%A1%E9%9B%84">联系</a></li>
<li id="nav_rss"><a id="blog_nav_rss" class="menu" href="http://www.cnblogs.com/rik28/rss">订阅</a>
<!--<a id="blog_nav_rss_image" class="aHeaderXML" href="http://www.cnblogs.com/rik28/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li id="nav_admin"><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>

		<div class="blogStats">
			
			<div id="blog_stats">
<!--done-->
随笔-37&nbsp;
文章-0&nbsp;
评论-55&nbsp;
</div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/rik28/p/6024425.html">Vue.js——60分钟快速入门</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><h1><a style="font-size: 14px; line-height: 1.5" href="https://github.com/vuejs/vue" target="_blank">Vue.js</a><span style="font-size: 14px; line-height: 1.5">是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。</span></h1>
<p><span style="font-size: 14px; line-height: 1.5">本文摘自：http://www.cnblogs.com/keepfool/p/5619070.html</span></p>
<p>如果你之前已经习惯了用jQuery操作DOM，学习Vue.js时请先抛开手动操作DOM的思维，因为Vue.js是数据驱动的，你无需手动操作
DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦你创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。</p>
<p>当然了，在使用Vue.js时，你也可以结合其他库一起使用，比如jQuery。</p>
<p>本文的Demo和源代码已放到GitHub，如果您觉得本篇内容不错，请点个赞，或在GitHub上加个星星！</p>
<p class="demo"><a class="btn-demo" href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/v-for.html" target="_blank">v-for Demo</a>&nbsp;<a class="btn-demo" href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/v-bind.html" target="_blank">v-bind Demo</a>&nbsp;<a class="btn-demo" href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/simple-demo.html" target="_blank">Page Demo</a>&nbsp;<a class="btn-demo" href="https://github.com/keepfool/vue-tutorials" target="_blank">GitHub Source</a></p>
<h2>MVVM模式</h2>
<p>下图不仅概括了MVVM模式（Model-View-ViewModel），还描述了在Vue.js中ViewModel是如何和View以及Model进行交互的。</p>
<p></p>
<p><strong>ViewModel是Vue.js的核心，它是一个Vue实例。</strong>Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。</p>
<p>当创建了ViewModel后，双向绑定是如何达成的呢？</p>
<p>首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。<br>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据；<br>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。</p>
<h2>Hello World示例</h2>
<p>了解一门语言，或者学习一门新技术，编写Hello World示例是我们的必经之路。<br>这段代码在画面上输出"Hello World!"。</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;

    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-comment">&lt;!--这是我们的View--&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            {{ message }}
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        <span class="hljs-comment">// 这是我们的Model
        <span class="hljs-keyword">var exampleData = {
            message: <span class="hljs-string">'Hello World!'
        }

        <span class="hljs-comment">// 创建一个 Vue 实例或 "ViewModel"
        <span class="hljs-comment">// 它连接 View 与 Model
        <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: exampleData
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p>使用Vue的过程就是定义MVVM各个组成部分的过程的过程。</p>
<ol>
<li><strong>定义View</strong></li>
<li><strong>定义Model</strong></li>
<li><strong>创建一个Vue实例或"ViewModel"，它用于连接View和Model</strong></li>
</ol>
<p>在创建Vue实例时，需要传入一个<strong>选项对象</strong>，选项对象可以包含数据、挂载元素、方法、模生命周期钩子等等。</p>
<p>在这个示例中，<strong>选项对象</strong>的<strong>el属性</strong>指向View，<code>el: '#app'</code>表示该Vue实例将挂载到<code>&lt;div id="app"&gt;...&lt;/div&gt;</code>这个元素；<strong>data属性</strong>指向Model，<code>data: exampleData</code>表示我们的Model是exampleData对象。<br>Vue.js有多种数据绑定的语法，最基础的形式是文本插值，使用一对大括号语法，在运行时<code>{{ message }}</code>会被数据对象的message属性替换，所以页面上会输出"Hello World!"。</p>
<p class="note">Vue.js已经更新到2.0版本了，但由于还不是正式版，本文的代码都是1.0.25版本的。</p>
<h3>双向绑定示例</h3>
<p>MVVM模式本身是实现了双向绑定的，在Vue.js中可以使用<code>v-model</code>指令在表单元素上创建双向数据绑定。</p>
<pre class="xml hljs "><span class="hljs-comment">&lt;!--这是我们的View--&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">p&gt;{{ message }}<span class="hljs-tag">&lt;/<span class="hljs-title">p&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">input <span class="hljs-attribute">type=<span class="hljs-value">"text" <span class="hljs-attribute">v-model=<span class="hljs-value">"message"/&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p>将message绑定到文本框，当更改文本框的值时，<code>&lt;p&gt;{{ message }}&lt;/p&gt;</code>&nbsp;中的内容也会被更新。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065309718-2118753556.gif"><img title="1" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065311062-227248599.gif" alt="1" height="212" width="449"></a></p>
<p>反过来，如果改变message的值，文本框的值也会被更新，我们可以在Chrome控制台进行尝试。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065312015-708112076.gif"><img title="2" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065313046-1157492348.gif" alt="2" height="596" width="678"></a></p>
<p class="note">Vue实例的data属性指向exampleData，它是一个引用类型，改变了exampleData对象的属性，同时也会影响Vue实例的data属性。</p>
<h1>Vue.js的常用指令</h1>
<p>上面用到的<code>v-model</code>是Vue.js常用的一个指令，那么指令是什么呢？</p>
<div class="bs-callout bs-callout-info"><strong>Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。</strong></div>
<p>Vue.js提供了一些常用的内置指令，接下来我们将介绍以下几个内置指令：</p>
<ul>
<li>v-if指令</li>
<li>v-show指令</li>
<li>v-else指令</li>
<li>v-for指令</li>
<li>v-bind指令</li>
<li>v-on指令</li>
</ul>
<p>Vue.js具有良好的扩展性，我们也可以开发一些自定义的指令，后面的文章会介绍自定义指令。</p>
<h2>v-if指令</h2>
<p><code>v-if</code>是条件渲染指令，它根据表达式的真假来删除和插入元素，它的基本语法如下：</p>
<pre class="xml hljs ">v-if="<em>expression</em>"</pre>
<p>expression是一个返回bool值的表达式，表达式可以是一个bool属性，也可以是一个返回bool的运算式。例如：</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1&gt;Hello, Vue.js!<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-if=<span class="hljs-value">"yes"&gt;Yes!<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-if=<span class="hljs-value">"no"&gt;No!<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-if=<span class="hljs-value">"age &gt;= 25"&gt;Age: {{ age }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-if=<span class="hljs-value">"name.indexOf('jack') &gt;= 0"&gt;Name: {{ name }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: {
                yes: <span class="hljs-literal">true,
                no: <span class="hljs-literal">false,
                age: <span class="hljs-number">28,
                name: <span class="hljs-string">'keepfool'
            }
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p><strong>注意：</strong>yes, no, age, name这4个变量都来源于Vue实例选项对象的data属性。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065313781-1005102718.png"><img title="image" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065314546-1211050706.png" alt="image" height="313" width="384" border="0"></a></p>
<p>这段代码使用了4个表达式：</p>
<ul>
<li>数据的<code>yes</code>属性为true，所以"Yes!"会被输出；</li>
<li>数据的<code>no</code>属性为false，所以"No!"不会被输出；</li>
<li>运算式<code>age &gt;= 25</code>返回true，所以"Age: 28"会被输出；</li>
<li>运算式<code>name.indexOf('jack') &gt;= 0</code>返回false，所以"Name: keepfool"不会被输出。</li>
</ul>
<p class="note"><strong>注意：</strong>v-if指令是根据条件表达式的值来执行<strong>元素的插入或者删除行为。</strong></p>
<p>这一点可以从渲染的HTML源代码看出来，面上只渲染了3个&lt;h1&gt;元素，<code>v-if</code>值为false的&lt;h1&gt;元素没有渲染到HTML。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065315515-1776406933.png"><img title="image" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065316265-161676773.png" alt="image" height="269" width="525" border="0"></a></p>
<p>为了再次验证这一点，可以在Chrome控制台更改age属性，使得表达式<code>age &gt;= 25</code>的值为false，可以看到<code>&lt;h1&gt;Age: 28&lt;/h1&gt;</code>元素被删除了。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065317577-1183006666.gif"><img title="3" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065319406-1162614113.gif" alt="3" height="734" width="634"></a></p>
<p>age是定义在选项对象的data属性中的，为什么Vue实例可以直接访问它呢？<br>这是因为<strong>每个Vue实例都会代理其选项对象里的data属性。</strong></p>
<h2>v-show指令</h2>
<p><code>v-show</code>也是条件渲染指令，和v-if指令不同的是，使用<code>v-show</code>指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性。</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1&gt;Hello, Vue.js!<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-show=<span class="hljs-value">"yes"&gt;Yes!<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-show=<span class="hljs-value">"no"&gt;No!<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-show=<span class="hljs-value">"age &gt;= 25"&gt;Age: {{ age }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-show=<span class="hljs-value">"name.indexOf('jack') &gt;= 0"&gt;Name: {{ name }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: {
                yes: <span class="hljs-literal">true,
                no: <span class="hljs-literal">false,
                age: <span class="hljs-number">28,
                name: <span class="hljs-string">'keepfool'
            }
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h2><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065320577-322007545.png"><img title="image" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065321359-1780927154.png" alt="image" height="314" width="500" border="0"></a></h2>
<p>在Chrome控制台更改age属性，使得表达式<code>age &gt;= 25</code>的值为false，可以看到<code>&lt;h1&gt;Age: 24&lt;/h1&gt;</code>元素被设置了style="display:none"样式。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065322656-1570128969.gif"><img title="4" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065324343-1072339483.gif" alt="4" height="734" width="634"></a></p>
<h2>v-else指令</h2>
<p>可以用<code>v-else</code>指令为<code>v-if</code>或<code>v-show</code>添加一个“else块”。<code>v-else</code>元素必须立即跟在<code>v-if</code>或<code>v-show</code>元素的后面——否则它不能被识别。</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;

    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-if=<span class="hljs-value">"age &gt;= 25"&gt;Age: {{ age }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-else&gt;Name: {{ name }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1&gt;---------------------分割线---------------------<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-show=<span class="hljs-value">"name.indexOf('keep') &gt;= 0"&gt;Name: {{ name }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">h1 <span class="hljs-attribute">v-else&gt;Sex: {{ sex }}<span class="hljs-tag">&lt;/<span class="hljs-title">h1&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: {
                age: <span class="hljs-number">28,
                name: <span class="hljs-string">'keepfool',
                sex: <span class="hljs-string">'Male'
            }
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p><code>v-else</code>元素是否渲染在HTML中，取决于前面使用的是<code>v-if</code>还是<code>v-show</code>指令。<br>这段代码中<code>v-if</code>为true，后面的<code>v-else</code>不会渲染到HTML；<code>v-show</code>为tue，但是后面的<code>v-else</code>仍然渲染到HTML了。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065325609-935780863.png"><img title="image" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065326546-136301763.png" alt="image" height="686" width="667" border="0"></a></p>
<h2>v-for指令</h2>
<p><code>v-for</code>指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：</p>
<pre class="xml hljs ">v-for="item in items"</pre>
<p>items是一个数组，item是当前被遍历的数组元素。</p>
<div class="code-toolbar"><a class="toggle-code-link">隐藏代码</a></div>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;

    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">link <span class="hljs-attribute">rel=<span class="hljs-value">"stylesheet" <span class="hljs-attribute">href=<span class="hljs-value">"styles/demo.css" /&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;

    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">table&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">thead&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">tr&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Name<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Age<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Sex<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                    <span class="hljs-tag">&lt;/<span class="hljs-title">tr&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">thead&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">tbody&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">tr <span class="hljs-attribute">v-for=<span class="hljs-value">"person in people"&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-title">td&gt;{{ person.name  }}<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-title">td&gt;{{ person.age  }}<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                        <span class="hljs-tag">&lt;<span class="hljs-title">td&gt;{{ person.sex  }}<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                    <span class="hljs-tag">&lt;/<span class="hljs-title">tr&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">tbody&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-title">table&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: {
                people: [{
                    name: <span class="hljs-string">'Jack',
                    age: <span class="hljs-number">30,
                    sex: <span class="hljs-string">'Male'
                }, {
                    name: <span class="hljs-string">'Bill',
                    age: <span class="hljs-number">26,
                    sex: <span class="hljs-string">'Male'
                }, {
                    name: <span class="hljs-string">'Tracy',
                    age: <span class="hljs-number">22,
                    sex: <span class="hljs-string">'Female'
                }, {
                    name: <span class="hljs-string">'Chris',
                    age: <span class="hljs-number">36,
                    sex: <span class="hljs-string">'Male'
                }]
            }
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;

<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p>我们在选项对象的data属性中定义了一个people数组，然后在#app元素内使用<code>v-for</code>遍历people数组，输出每个person对象的姓名、年龄和性别。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065327202-406012811.png"><img title="image" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065327859-2129607250.png" alt="image" height="294" width="469" border="0"></a></p>
<p class="demo"><a class="btn-demo" href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/v-for.html" target="_blank">View Demo</a></p>
<h2>v-bind指令</h2>
<p><code>v-bind</code>指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：<code>v-bind:class</code></p>
<pre class="xml hljs ">v-bind:<em>argument</em>="<em>expression</em>"</pre>
<p>下面这段代码构建了一个简单的分页条，v-bind指令作用于元素的class特性上。<br>这个指令包含一个表达式，表达式的含义是：高亮当前页。</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">link <span class="hljs-attribute">rel=<span class="hljs-value">"stylesheet" <span class="hljs-attribute">href=<span class="hljs-value">"styles/demo.css" /&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">ul <span class="hljs-attribute">class=<span class="hljs-value">"pagination"&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">li <span class="hljs-attribute">v-for=<span class="hljs-value">"n in pageCount"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">a <span class="hljs-attribute">href=<span class="hljs-value">"javascripit:void(0)" <span class="hljs-attribute">v-bind:class=<span class="hljs-value">"activeNumber === n + 1 ? 'active' : ''"&gt;{{ n + 1 }}<span class="hljs-tag">&lt;/<span class="hljs-title">a&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">li&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-title">ul&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: {
                activeNumber: <span class="hljs-number">1,
                pageCount: <span class="hljs-number">10
            }
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p>注意<code>v-for="n in pageCount"</code>这行代码，pageCount是一个整数，遍历时n从0开始，然后遍历到pageCount –1结束。</p>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065328499-156638431.png"><img title="image" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065329281-1176325976.png" alt="image" height="105" width="500" border="0"></a></p>
<p class="demo"><a class="btn-demo" href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/v-bind.html" target="_blank">View Demo</a></p>
<h2>v-on指令</h2>
<p><code>v-on</code>指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听&lt;a&gt;元素的点击事件：</p>
<pre class="xml hljs "><span class="hljs-tag">&lt;<span class="hljs-title">a <span class="hljs-attribute">v-on:click=<span class="hljs-value">"doSomething"&gt;</span></span></span></span></pre>
<p>有两种形式调用方法：<strong>绑定一个方法（让事件指向方法的引用），或者使用内联语句。<br></strong>Greet按钮将它的单击事件直接绑定到greet()方法，而Hi按钮则是调用say()方法。</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">p&gt;<span class="hljs-tag">&lt;<span class="hljs-title">input <span class="hljs-attribute">type=<span class="hljs-value">"text" <span class="hljs-attribute">v-model=<span class="hljs-value">"message"&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">p&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">p&gt;
                <span class="hljs-comment">&lt;!--click事件直接绑定一个方法--&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">button <span class="hljs-attribute">v-on:click=<span class="hljs-value">"greet"&gt;Greet<span class="hljs-tag">&lt;/<span class="hljs-title">button&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-title">p&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">p&gt;
                <span class="hljs-comment">&lt;!--click事件使用内联语句--&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">button <span class="hljs-attribute">v-on:click=<span class="hljs-value">"say('Hi')"&gt;Hi<span class="hljs-tag">&lt;/<span class="hljs-title">button&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-title">p&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: <span class="hljs-string">'#app',
            data: {
                message: <span class="hljs-string">'Hello, Vue.js!'
            },
            <span class="hljs-comment">// 在 `methods` 对象中定义方法
            methods: {
                greet: <span class="hljs-function"><span class="hljs-keyword">function<span class="hljs-params">() {
                    <span class="hljs-comment">// // 方法内 `this` 指向 vm
                    alert(<span class="hljs-keyword">this.message)
                },
                say: <span class="hljs-function"><span class="hljs-keyword">function<span class="hljs-params">(msg) {
                    alert(msg)
                }
            }
        })
    <span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
<span class="hljs-tag">&lt;/<span class="hljs-title">html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065330109-1825840680.gif"><img title="5" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065331124-2002999272.gif" alt="5" height="483" width="457"></a></p>
<h2>v-bind和v-on的缩写</h2>
<p>Vue.js为最常用的两个指令<code>v-bind</code>和<code>v-on</code>提供了缩写方式。<strong>v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。</strong></p>
<pre class="xml hljs "><span class="hljs-comment">&lt;!--完整语法--&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">a <span class="hljs-attribute">href=<span class="hljs-value">"javascripit:void(0)" <span class="hljs-attribute">v-bind:class=<span class="hljs-value">"activeNumber === n + 1 ? 'active' : ''"&gt;{{ n + 1 }}<span class="hljs-tag">&lt;/<span class="hljs-title">a&gt;
<span class="hljs-comment">&lt;!--缩写语法--&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">a <span class="hljs-attribute">href=<span class="hljs-value">"javascripit:void(0)" <span class="hljs-attribute">:class=<span class="hljs-value">"activeNumber=== n + 1 ? 'active' : ''"&gt;{{ n + 1 }}<span class="hljs-tag">&lt;/<span class="hljs-title">a&gt;

<span class="hljs-comment">&lt;!--完整语法--&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">button <span class="hljs-attribute">v-on:click=<span class="hljs-value">"greet"&gt;Greet<span class="hljs-tag">&lt;/<span class="hljs-title">button&gt;
<span class="hljs-comment">&lt;!--缩写语法--&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">button @<span class="hljs-attribute">click=<span class="hljs-value">"greet"&gt;Greet<span class="hljs-tag">&lt;/<span class="hljs-title">button&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<h1>综合示例</h1>
<p>现在我们已经介绍了一些Vue.js的基础知识了，结合以上知识我们可以来做个小Demo。</p>
<pre class="xml hljs "><span class="hljs-doctype">&lt;!DOCTYPE html&gt;
<span class="hljs-tag">&lt;<span class="hljs-title">html&gt;

    <span class="hljs-tag">&lt;<span class="hljs-title">head&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">meta <span class="hljs-attribute">charset=<span class="hljs-value">"UTF-8"&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">title&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">title&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">link <span class="hljs-attribute">rel=<span class="hljs-value">"stylesheet" <span class="hljs-attribute">href=<span class="hljs-value">"styles/demo.css" /&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">head&gt;

    <span class="hljs-tag">&lt;<span class="hljs-title">body&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">id=<span class="hljs-value">"app"&gt;

            <span class="hljs-tag">&lt;<span class="hljs-title">fieldset&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">legend&gt;
                    Create New Person
                <span class="hljs-tag">&lt;/<span class="hljs-title">legend&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">class=<span class="hljs-value">"form-group"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">label&gt;Name:<span class="hljs-tag">&lt;/<span class="hljs-title">label&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">input <span class="hljs-attribute">type=<span class="hljs-value">"text" <span class="hljs-attribute">v-model=<span class="hljs-value">"newPerson.name"/&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">class=<span class="hljs-value">"form-group"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">label&gt;Age:<span class="hljs-tag">&lt;/<span class="hljs-title">label&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">input <span class="hljs-attribute">type=<span class="hljs-value">"text" <span class="hljs-attribute">v-model=<span class="hljs-value">"newPerson.age"/&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">class=<span class="hljs-value">"form-group"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">label&gt;Sex:<span class="hljs-tag">&lt;/<span class="hljs-title">label&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">select <span class="hljs-attribute">v-model=<span class="hljs-value">"newPerson.sex"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">option <span class="hljs-attribute">value=<span class="hljs-value">"Male"&gt;Male<span class="hljs-tag">&lt;/<span class="hljs-title">option&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">option <span class="hljs-attribute">value=<span class="hljs-value">"Female"&gt;Female<span class="hljs-tag">&lt;/<span class="hljs-title">option&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">select&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">div <span class="hljs-attribute">class=<span class="hljs-value">"form-group"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">label&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">label&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">button @<span class="hljs-attribute">click=<span class="hljs-value">"createPerson"&gt;Create<span class="hljs-tag">&lt;/<span class="hljs-title">button&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">fieldset&gt;
        <span class="hljs-tag">&lt;<span class="hljs-title">table&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">thead&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">tr&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Name<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Age<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Sex<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">th&gt;Delete<span class="hljs-tag">&lt;/<span class="hljs-title">th&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">tr&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-title">thead&gt;
            <span class="hljs-tag">&lt;<span class="hljs-title">tbody&gt;
                <span class="hljs-tag">&lt;<span class="hljs-title">tr <span class="hljs-attribute">v-for=<span class="hljs-value">"person in people"&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">td&gt;{{ person.name }}<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">td&gt;{{ person.age }}<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">td&gt;{{ person.sex }}<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                    <span class="hljs-tag">&lt;<span class="hljs-title">td <span class="hljs-attribute">:class=<span class="hljs-value">"'text-center'"&gt;<span class="hljs-tag">&lt;<span class="hljs-title">button @<span class="hljs-attribute">click=<span class="hljs-value">"deletePerson($index)"&gt;Delete<span class="hljs-tag">&lt;/<span class="hljs-title">button&gt;<span class="hljs-tag">&lt;/<span class="hljs-title">td&gt;
                <span class="hljs-tag">&lt;/<span class="hljs-title">tr&gt;
            <span class="hljs-tag">&lt;/<span class="hljs-title">tbody&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">table&gt;
        <span class="hljs-tag">&lt;/<span class="hljs-title">div&gt;
    <span class="hljs-tag">&lt;/<span class="hljs-title">body&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script <span class="hljs-attribute">src=<span class="hljs-value">"js/vue.js"&gt;<span class="javascript"><span class="hljs-tag">&lt;/<span class="hljs-title">script&gt;
    <span class="hljs-tag">&lt;<span class="hljs-title">script&gt;<span class="javascript">
        <span class="hljs-keyword">var vm = <span class="hljs-keyword">new Vue({
            el: '#app',
            data: {
                newPerson: {
                    name: '',
                    age: 0,
                    sex: 'Male'
                },
                people: [{
                    name: 'Jack',
                    age: 30,
                    sex: 'Male'
                }, {
                    name: 'Bill',
                    age: 26,
                    sex: 'Male'
                }, {
                    name: 'Tracy',
                    age: 22,
                    sex: 'Female'
                }, {
                    name: 'Chris',
                    age: 36,
                    sex: 'Male'
                }]
            },
            methods:{
                createPerson: function(){
                    this.people.push(this.newPerson);
                    // 添加完newPerson对象后，重置newPerson对象
                    this.newPerson = {name: '', age: 0, sex: 'Male'}
                },
                deletePerson: function(index){
                    // 删一个数组元素
                    this.people.splice(index,1);
                }
            }
        })
    &lt;/script&gt;

&lt;/html&gt;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<p><a href="http://images2015.cnblogs.com/blog/341820/201606/341820-20160627065332359-1941638431.gif"><img title="6" src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/341820-20160627065333452-768092605.gif" alt="6" height="557" width="643"></a></p>
<p>在我的GitHub Pages查看该Demo：</p>
<p class="demo"><a class="btn-demo" href="https://keepfool.github.io/vue-tutorials/01.GettingStarted/simple-demo.html" target="_blank">View Demo</a></p>
<h1>总结</h1>
<p>本文简单介绍了Vue.js的MVVM模型和它的双向绑定机制，然后以一个Hello World示例开始了我们的Vue.js之旅，接着我们了解了几个比较常用的指令，最后根据这些知识我们构建了一个简单的示例。</p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info"><div id="green_channel">
        <a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(6024425,cb_blogId,1);green_channel_success(this,'谢谢推荐！');">好文要顶</a>
            <a id="green_channel_follow" onclick="follow('60072222-1d7f-e311-8d02-90b11c0b17d6');" href="javascript:void(0);">关注我</a>
    <a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a>
    <a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/icon_weibo_24.png" alt=""></a>
    <a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/wechat.png" alt=""></a>
</div>
<div id="author_profile">
    <div id="author_profile_info" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/rik28/" target="_blank"><img src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/sample_face.gif" class="author_avatar" alt=""></a>
        <div id="author_profile_detail" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/rik28/">無雄</a><br>
            <a href="http://home.cnblogs.com/u/rik28/followees">关注 - 1</a><br>
            <a href="http://home.cnblogs.com/u/rik28/followers">粉丝 - 77</a>
        </div>
    </div>
    <div class="clear"></div>
    <div id="author_profile_honor"></div>
    <div id="author_profile_follow">
                <a href="javascript:void(0);" onclick="follow('60072222-1d7f-e311-8d02-90b11c0b17d6');return false;">+加关注</a>
    </div>
</div>
<div id="div_digg">
    <div class="diggit" onclick="votePost(6024425,'Digg')">
        <span class="diggnum" id="digg_count">55</span>
    </div>
    <div class="buryit" onclick="votePost(6024425,'Bury')">
        <span class="burynum" id="bury_count">0</span>
    </div>
    <div class="clear"></div>
    <div class="diggword" id="digg_tips">
    </div>
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/rik28/p/5992211.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/rik28/p/5992211.html" title="发布于2016-10-24 11:09">我们是如何做好前端工程化和静态资源管理</a><br><a href="http://www.cnblogs.com/rik28/p/6029294.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/rik28/p/6029294.html" title="发布于2016-11-04 10:21">移动Web单页应用开发实践——页面结构化</a><br></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2016-11-02 20:39</span> <a href="http://www.cnblogs.com/rik28/">無雄</a> 阅读(<span id="post_view_count">205342</span>) 评论(<span id="post_comment_count">52</span>)  <a href="https://i.cnblogs.com/EditPosts.aspx?postid=6024425" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(6024425);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=174946,cb_entryId=6024425,cb_blogApp=currentBlogApp,cb_blogUserGuid='60072222-1d7f-e311-8d02-90b11c0b17d6',cb_entryCreatedDate='2016/11/2 20:39:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"><div id="comments_pager_top"><div class="pager"><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">&lt; Prev</a><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">1</a><span class="current">2</span></div></div>
<!--done-->
<div class="feedback_area_title">评论列表</div>
<div class="feedbackNoItems"></div>
	

		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"></span>
				</div>
				<a href="#3693502" class="layer">#51楼</a><a name="3693502" id="comment_anchor_3693502"></a>  <span class="comment_date">2017-05-16 15:43</span> <a id="a_comment_author_3693502" href="http://home.cnblogs.com/u/1166847/" target="_blank">bear9527</a> <a href="http://msg.cnblogs.com/send/bear9527" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3693502" class="blog_comment_body">“v-else元素是否渲染在HTML中，取决于前面使用的是v-if还是v-show指令。<br>这段代码中v-if为true，后面的v-else不会渲染到HTML；v-show为tue，但是后面的v-else仍然渲染到HTML了。”<br>这句话貌似有问题！v-else 好像不能放到 v-show后面，会报错</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3693502,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3693502,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"></span>
				</div>
				<a href="#3696575" class="layer">#52楼</a><a name="3696575" id="comment_anchor_3696575"></a><span id="comment-maxId" style="display:none;">3696575</span><span id="comment-maxDate" style="display:none;">2017/5/19 23:07:05</span>  <span class="comment_date">2017-05-19 23:07</span> <a id="a_comment_author_3696575" href="http://www.cnblogs.com/kezeguo/" target="_blank">国国分享8</a> <a href="http://msg.cnblogs.com/send/%E5%9B%BD%E5%9B%BD%E5%88%86%E4%BA%AB8" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3696575" class="blog_comment_body">现在都在学vue.js2.0我这边有最新的2017教程包括电商实战项目vue.js1.0/2.012套需要的不要可以加我Q1139721002备注来意</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3696575,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3696575,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	<div id="comments_pager_bottom"><div class="pager"><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">&lt; Prev</a><a href="#%21comments" onclick="commentManager.renderComments(1,50);return false;">1</a><span class="current">2</span></div></div></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login('commentform');">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="ad_t2"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库</a><br><a href="http://www.gcpowertools.com.cn/products/activereports/excel.htm?utm_source=cnblogs&amp;utm_medium=blogpage&amp;utm_term=bottom&amp;utm_content=AR&amp;utm_campaign=community" target="_blank">【报表】Excel 报表开发18 招式，人人都能做报表</a><br><a href="http://click.aliyun.com/m/15483" target="_blank">【活动】阿里云海外云服务全面降价助力企业全球布局</a><br><a href="https://group.cnblogs.com/topic/76829.html" target="_blank">【实用】40+篇云服务器操作及运维基础知识！</a><br></div>
<div id="opt_under_post"></div>
<div id="cnblogs_c1" class="c_ad_block"><a href="https://cn.udacity.com/course/deep-learning-nanodegree-foundation--nd101/?utm_source=cnblogs&amp;utm_medium=referral&amp;utm_campaign=DLND03" target="_blank"><img src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/24442-20170517165836135-1248276195.jpg" alt="深度学习0519" height="250" width="300"></a></div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/570091/" target="_blank">谷歌推新市场归因工具Google Attribution 帮助广告主定位客户</a><br> ·  <a href="http://news.cnblogs.com/n/570089/" target="_blank">支付宝终于有个胞妹了！支付宝HK发布：界面极简</a><br> ·  <a href="http://news.cnblogs.com/n/570096/" target="_blank">新Surface Pro、Surface Laptop笔记本、HoloLens国行开卖</a><br> ·  <a href="http://news.cnblogs.com/n/570095/" target="_blank">技术团队里什么样的人会被清除？抢老板的工作干合适吗？</a><br> ·  <a href="http://news.cnblogs.com/n/570094/" target="_blank">黄允松：云计算的谎言与野心</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="cnblogs_c2" class="c_ad_block"><a href="http://click.aliyun.com/m/17215/" target="_blank"><img src="Vue.js——60分钟快速入门%20-%20無雄%20-%20博客园_files/24442-20170417123605337-535991337.jpg" alt="阿里云E4" height="60" width="468"></a></div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/569992/" target="_blank">程序员的工作、学习与绩效</a><br> ·  <a href="http://kb.cnblogs.com/page/569056/" target="_blank">软件开发为什么很难</a><br> ·  <a href="http://kb.cnblogs.com/page/565901/" target="_blank">唱吧DevOps的落地，微服务CI/CD的范本技术解读</a><br> ·  <a href="http://kb.cnblogs.com/page/566523/" target="_blank">程序员，如何从平庸走向理想？</a><br> ·  <a href="http://kb.cnblogs.com/page/566318/" target="_blank">我为什么鼓励工程师写blog</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/rik28/">無雄</a><br>园龄：<a href="http://home.cnblogs.com/u/rik28/" title="入园时间：2014-01-17">3年4个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/rik28/followers/">77</a><br>关注：<a href="http://home.cnblogs.com/u/rik28/followees/">1</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="follow('60072222-1d7f-e311-8d02-90b11c0b17d6')">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style=""><table id="blogCalendar" class="Cal" title="Calendar" cellspacing="0" cellpadding="0">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar('2017/04/01');return false;">&lt;</a></td><td align="center">2017年5月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar('2017/06/01');return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" abbr="日" scope="col" align="center">日</th><th class="CalDayHeader" abbr="一" scope="col" align="center">一</th><th class="CalDayHeader" abbr="二" scope="col" align="center">二</th><th class="CalDayHeader" abbr="三" scope="col" align="center">三</th><th class="CalDayHeader" abbr="四" scope="col" align="center">四</th><th class="CalDayHeader" abbr="五" scope="col" align="center">五</th><th class="CalDayHeader" abbr="六" scope="col" align="center">六</th></tr><tr><td class="CalOtherMonthDay" align="center">30</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td class="CalWeekendDay" align="center">6</td></tr><tr><td class="CalWeekendDay" align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td class="CalWeekendDay" align="center">13</td></tr><tr><td class="CalWeekendDay" align="center">14</td><td align="center">15</td><td align="center">16</td><td align="center">17</td><td align="center">18</td><td align="center">19</td><td class="CalWeekendDay" align="center">20</td></tr><tr><td class="CalWeekendDay" align="center">21</td><td align="center">22</td><td align="center">23</td><td class="CalTodayDay" align="center">24</td><td align="center">25</td><td align="center">26</td><td class="CalWeekendDay" align="center">27</td></tr><tr><td class="CalWeekendDay" align="center">28</td><td align="center">29</td><td align="center">30</td><td align="center">31</td><td class="CalOtherMonthDay" align="center">1</td><td class="CalOtherMonthDay" align="center">2</td><td class="CalOtherMonthDay" align="center">3</td></tr><tr><td class="CalOtherMonthDay" align="center">4</td><td class="CalOtherMonthDay" align="center">5</td><td class="CalOtherMonthDay" align="center">6</td><td class="CalOtherMonthDay" align="center">7</td><td class="CalOtherMonthDay" align="center">8</td><td class="CalOtherMonthDay" align="center">9</td><td class="CalOtherMonthDay" align="center">10</td></tr>
</tbody></table></div><script type="text/javascript">loadBlogDefaultCalendar();</script></div>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block">
<div id="sidebar_search" class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="sidebar_search_box">
<div id="widget_my_zzk" class="div_my_zzk"><input id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk" type="text">&nbsp;<input onclick="zzk_go()" value="找找看" id="btnZzk" class="btn_my_zzk" type="button"></div>
<div id="widget_my_google" class="div_my_zzk"><input name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk" type="text">&nbsp;<input onclick="google_go()" value="谷歌搜索" class="btn_my_zzk" type="button"></div>
</div>
</div>

</div><div id="sidebar_shortcut" class="sidebar-block">
<div class="catListLink">
<h3 class="catListTitle">常用链接</h3>
<ul>
<li><a href="http://www.cnblogs.com/rik28/p/" title="我的博客的随笔列表">我的随笔</a></li><li><a href="http://www.cnblogs.com/rik28/MyComments.html" title="我发表过的评论列表">我的评论</a></li><li><a href="http://www.cnblogs.com/rik28/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li><li><a href="http://www.cnblogs.com/rik28/RecentComments.html" title="我的博客的评论列表">最新评论</a></li><li><a href="http://www.cnblogs.com/rik28/tag/" title="我的博客的标签列表">我的标签</a></li>
</ul>
<div id="itemListLin_con" style="display:none;">
<ul>

</ul>
</div>
</div></div><div id="sidebar_toptags" class="sidebar-block"></div><div id="sidebar_categories">
<div class="catListPostArchive">
<h3 class="catListTitle">随笔档案</h3>

<ul>

<li><a id="CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/rik28/archive/2017/04.html">2017年4月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/rik28/archive/2017/02.html">2017年2月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_2" href="http://www.cnblogs.com/rik28/archive/2017/01.html">2017年1月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_3" href="http://www.cnblogs.com/rik28/archive/2016/11.html">2016年11月 (3)</a> </li>

<li><a id="CatList_LinkList_0_Link_4" href="http://www.cnblogs.com/rik28/archive/2016/10.html">2016年10月 (8)</a> </li>

<li><a id="CatList_LinkList_0_Link_5" href="http://www.cnblogs.com/rik28/archive/2016/06.html">2016年6月 (6)</a> </li>

<li><a id="CatList_LinkList_0_Link_6" href="http://www.cnblogs.com/rik28/archive/2016/05.html">2016年5月 (5)</a> </li>

<li><a id="CatList_LinkList_0_Link_7" href="http://www.cnblogs.com/rik28/archive/2016/04.html">2016年4月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_8" href="http://www.cnblogs.com/rik28/archive/2015/11.html">2015年11月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_9" href="http://www.cnblogs.com/rik28/archive/2015/10.html">2015年10月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_10" href="http://www.cnblogs.com/rik28/archive/2015/07.html">2015年7月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_11" href="http://www.cnblogs.com/rik28/archive/2014/11.html">2014年11月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_12" href="http://www.cnblogs.com/rik28/archive/2014/04.html">2014年4月 (2)</a> </li>

<li><a id="CatList_LinkList_0_Link_13" href="http://www.cnblogs.com/rik28/archive/2014/01.html">2014年1月 (2)</a> </li>

</ul>

</div>

</div><div id="sidebar_recentcomments" class="sidebar-block"><div id="recent_comments_wrap">
<div class="catListComment">
<h3 class="catListTitle">最新评论</h3>
	<div id="RecentCommentsBlock"><ul>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/rik28/p/6024425.html#3696575">1. Re:Vue.js——60分钟快速入门</a></li>
        <li class="recent_comment_body">现在都在学vue.js2.0我这边有最新的2017教程包括电商实战项目vue.js1.0/2.012套需要的不要可以加我Q1139721002备注来意</li>
        <li class="recent_comment_author">--国国分享8</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/rik28/p/6024425.html#3693502">2. Re:Vue.js——60分钟快速入门</a></li>
        <li class="recent_comment_body">“v-else元素是否渲染在HTML中，取决于前面使用的是v-if还是v-show指令。这段代码中v-if为true，后面的v-else不会渲染到HTML；v-show为tue，但是后面的v-else......</li>
        <li class="recent_comment_author">--bear9527</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/rik28/p/6024425.html#3690747">3. Re:Vue.js——60分钟快速入门</a></li>
        <li class="recent_comment_body">这个写的非常好，看了感觉可以轻松入手...</li>
        <li class="recent_comment_author">--Sharp Jolon</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/rik28/p/6024425.html#3684247">4. Re:Vue.js——60分钟快速入门</a></li>
        <li class="recent_comment_body">非常不错的入门的学习资料！感谢分享2.0版本里面有些变化：比如v-show已经不再支持与v-else配合使用。学习的过程中如果遇到问题，还是要多去官网API中找答案。学习技术勿做伸手党。...</li>
        <li class="recent_comment_author">--thinkingpig</li>
        <li class="recent_comment_title"><a href="http://www.cnblogs.com/rik28/p/6024425.html#3683570">5. Re:Vue.js——60分钟快速入门</a></li>
        <li class="recent_comment_body">@blogbusvue版本的问题吧，9楼正解，...</li>
        <li class="recent_comment_author">--牵狼逛街的羊</li>
</ul>
</div>
</div>
</div></div><div id="sidebar_topviewedposts" class="sidebar-block"><div id="topview_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/rik28/p/6024425.html">1. Vue.js——60分钟快速入门(205350)</a></li><li><a href="http://www.cnblogs.com/rik28/p/5992211.html">2. 我们是如何做好前端工程化和静态资源管理(2729)</a></li><li><a href="http://www.cnblogs.com/rik28/p/6029294.html">3. 移动Web单页应用开发实践——页面结构化(2478)</a></li><li><a href="http://www.cnblogs.com/rik28/p/5977279.html">4. 汇总前端最最常用的JS代码片段-你值得收藏(1510)</a></li><li><a href="http://www.cnblogs.com/rik28/p/6029304.html">5. 构建单页Web应用(798)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topcommentedposts" class="sidebar-block"><div id="topfeedback_posts_wrap">
<div class="catListFeedback">
<h3 class="catListTitle">评论排行榜</h3>
	<div id="TopFeedbackPostsBlock"><ul><li><a href="http://www.cnblogs.com/rik28/p/6024425.html">1. Vue.js——60分钟快速入门(52)</a></li><li><a href="http://www.cnblogs.com/rik28/p/5992211.html">2. 我们是如何做好前端工程化和静态资源管理(2)</a></li><li><a href="http://www.cnblogs.com/rik28/p/6029304.html">3. 构建单页Web应用(1)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topdiggedposts" class="sidebar-block"><div id="topdigg_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">推荐排行榜</h3>
<div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/rik28/p/6024425.html">1. Vue.js——60分钟快速入门(55)</a></li><li><a href="http://www.cnblogs.com/rik28/p/5992211.html">2. 我们是如何做好前端工程化和静态资源管理(1)</a></li><li><a href="http://www.cnblogs.com/rik28/p/6029294.html">3. 移动Web单页应用开发实践——页面结构化(1)</a></li></ul></div>
</div></div></div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2017 無雄
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


</body></html>